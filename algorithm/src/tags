!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FALSE	dbg.h	/^#define FALSE /;"	d
LData	linkedlist.h	/^typedef int LData;$/;"	t
LinkedList	linkedlist.h	/^} LinkedList;$/;"	t	typeref:struct:_linkedlist
List	linkedlist.h	/^typedef LinkedList List;$/;"	t
Node	linkedlist.h	/^} Node;$/;"	t	typeref:struct:_node
QData	arrayqueue.h	/^typedef int QData;$/;"	t
QUEUE_SIZE	arrayqueue.h	/^#define QUEUE_SIZE /;"	d
Queue	arrayqueue.h	/^} Queue;$/;"	t	typeref:struct:_queue
RC_DUP	dbg.h	/^#define RC_DUP /;"	d
RC_ERR	dbg.h	/^#define RC_ERR /;"	d
RC_NFD	dbg.h	/^#define RC_NFD /;"	d
RC_NRM	dbg.h	/^#define RC_NRM /;"	d
SData	stack.h	/^typedef int SData;$/;"	t
STACK_SIZE	stack.h	/^#define STACK_SIZE /;"	d
Stack	stack.h	/^} Stack;$/;"	t	typeref:struct:_stack
TRUE	dbg.h	/^#define TRUE /;"	d
__ARRAY_QUEUE_H__	arrayqueue.h	/^#define __ARRAY_QUEUE_H__$/;"	d
__COMMOM_H__	common.h	/^#define __COMMOM_H__$/;"	d
__COMMON_API_H__	commonapi.h	/^#define __COMMON_API_H__$/;"	d
__LINKED_LIST_H__	linkedlist.h	/^#define __LINKED_LIST_H__$/;"	d
__STACK_H__	stack.h	/^#define __STACK_H__$/;"	d
__dbg_h__	dbg.h	/^#define __dbg_h__$/;"	d
_linkedlist	linkedlist.h	/^typedef struct _linkedlist {$/;"	s
_node	linkedlist.h	/^typedef struct _node {$/;"	s
_queue	arrayqueue.h	/^typedef struct _queue {$/;"	s
_stack	stack.h	/^typedef struct _stack$/;"	s
before	linkedlist.h	/^    Node *before;$/;"	m	struct:_linkedlist
check	dbg.h	/^#define check(/;"	d
check_debug	dbg.h	/^#define check_debug(/;"	d
check_mem	dbg.h	/^#define check_mem(/;"	d
clean_errno	dbg.h	/^#define clean_errno(/;"	d
countList	linkedlist.c	/^int countList(List *plist) {$/;"	f
cur	linkedlist.h	/^    Node *cur;$/;"	m	struct:_linkedlist
curPos	stack.h	/^    int curPos;$/;"	m	struct:_stack
data	linkedlist.h	/^    LData data;$/;"	m	struct:_node
debug	dbg.h	/^#define debug(/;"	d
deleteList	linkedlist.c	/^LData deleteList(List *plist) { $/;"	f
dequeue	arrayqueue.c	/^QData dequeue(Queue *pq)$/;"	f
enqueue	arrayqueue.c	/^int enqueue(Queue *pq, QData data)$/;"	f
firstList	linkedlist.c	/^int firstList(List *plist, LData *data) {$/;"	f
head	arrayqueue.h	/^    int head;$/;"	m	struct:_queue
head	linkedlist.h	/^    Node *head;$/;"	m	struct:_linkedlist
initList	linkedlist.c	/^void initList(List *plist) { $/;"	f
insertList	linkedlist.c	/^void insertList(List* plist, LData data) {$/;"	f
isEmpty	stack.c	/^int isEmpty(Stack *ps){$/;"	f
isQEmpty	arrayqueue.c	/^int isQEmpty(Queue *pq)$/;"	f
left_n_rotate	commonapi.c	/^void left_n_rotate(int arr[], int s, int t, int n) {$/;"	f
left_rotate	commonapi.c	/^void left_rotate(int arr[], int s, int t) {$/;"	f
log_err	dbg.h	/^#define log_err(/;"	d
log_info	dbg.h	/^#define log_info(/;"	d
log_warn	dbg.h	/^#define log_warn(/;"	d
main	main.c	/^int main(int argc, char *argv[])$/;"	f
max	commonapi.c	/^int max(int x, int y) {$/;"	f
max_arr	commonapi.c	/^int max_arr(const int arr[], const int len) {$/;"	f
min	commonapi.c	/^int min(int x, int y) {$/;"	f
next	linkedlist.h	/^    struct _node *next;$/;"	m	struct:_node	typeref:struct:_node::_node
nextList	linkedlist.c	/^int nextList(List *plist, LData *data) { $/;"	f
nextQIndex	arrayqueue.c	/^int nextQIndex(int idx)$/;"	f
numOfData	linkedlist.h	/^    int numOfData;$/;"	m	struct:_linkedlist
peek	stack.c	/^SData peek(Stack *ps){$/;"	f
pop	stack.c	/^SData pop(Stack *ps)$/;"	f
push	stack.c	/^int push(Stack *ps, SData data)$/;"	f
qpeek	arrayqueue.c	/^QData qpeek(Queue *pq)$/;"	f
queArr	arrayqueue.h	/^    QData queArr[QUEUE_SIZE];$/;"	m	struct:_queue
queueInit	arrayqueue.c	/^void queueInit(Queue *pq)$/;"	f
right_n_rotate	commonapi.c	/^void right_n_rotate(int arr[], int s, int t, int n) {$/;"	f
right_rotate	commonapi.c	/^void right_rotate(int arr[], int s, int t) {$/;"	f
sentinel	dbg.h	/^#define sentinel(/;"	d
stackArr	stack.h	/^    SData stackArr[STACK_SIZE];$/;"	m	struct:_stack
stackInit	stack.c	/^void stackInit(Stack *ps)$/;"	f
swap	commonapi.c	/^void swap(int *x, int *y) {$/;"	f
swap_arr	commonapi.c	/^void swap_arr(int arr[], int i, int j) {$/;"	f
tail	arrayqueue.h	/^    int tail;$/;"	m	struct:_queue
