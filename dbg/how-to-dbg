-코드를 쳐다보기만 해서는 절대 디버그를 할 수 없다.
-테스트 자동화를 통해 버그를 되풀이한다.
-디버거, valgrind, lint 하에서 프로그램을 실행시킨다.
-백트레이스를 찾고 그 과정에 연루된 모든 변수 값을 출력시킨다.
-버그를 수저했다면 check()를 추가하여 버그를 예방한다.

-'과학적 방법' 디버깅
    :가능한 원인을 생각해낸 다음 이를 배제하거나 혹은 이것이 결함을 일으키는 원인임을 증명한다.
     로깅(디버그 프린팅)이 과학적으로 버그를 해결할 수 있다. 대부분의 경우 필요한 정보를 수집하기 용이한 방법이다.

     core 떨어진 경우 -> GDB 디버깅 사용(GDB를 사용 하는 경우에는 전적으로 정보를 얻는 용도로 GDB를 사용한다. GDB로 여기저기 찔러보고 실마리를 찾으면 다시 디버그 프린팅으로 디버그)
     로직 또는 사용범과 관련된 결점 진단하거나 고칠 경우 -> 디버그 프린팅 사용

-디버깅 전략
  1. notes.txt라는 이름의 텍스트 파일을 만들고 아이디어, 버그, 문제 등의 연구 노트로 사용한다.
  2. GDB를 사용하기 전에 해결코자 하는 버그와 예상 원인을 작성한다. (가설 세우기)
  3. 각각의 원인에 대해 어떤 파일 또는 함수에서 그 원인이 발생하는지를 적는다. 혹은 간단히 원인이 무엇인지 모른다고 적을 수도 있다. (파일, 함수, 변수 순서로 생각)
  4. 이제 GDB를 실행하여 가장 의심되는 파일 내 함수와 변수에 중단점(breakpoint)를 설정한다.
  5. GDB를 이용하여 프로그램을 실행시키고 생각한 곳이 진짜 원인이었는지를 검증한다. 제일 좋은 방법은 set 명령을 이용하여 프로그램을 쉽게 고치거나 바로 오류를 일으킬 수 있는지를 확인하는 것이다.
  6. 만일 여기가 문제의 원인이 아니라면 notes.txt 파일에 원인이 아니라고 명시하고 그 이유도 같이 기록한다. 그리고는 오류 원인이 될 가능성이 있고 디버깅이 가장 쉬운 다음 지점으로 이동하여 정보를 수집한다. (원인을 찾을 때 까지 무한루프)

  => 원인을 찾아보고 가설을 세우는 과정이 매우 중요하다. 이러한 방법론을 통해 우리는 가능성 있는 원인에 대한 통찰력을 키우게 될 것이며, 결국 진짜 원인을 찾게 될 것이다.

  => 로깅을 사용할 경우 차이점은 가설을 notes.txt 파일이 아닌 소스코드에 기록한다는 것이다. 출력문 자체가 가설이 되기 때문에 디버그 프린팅을 이용하는 것 자체가 과학적으로 버그를 찾는 활동이 된다.


- Defensive Programming 방어적 프로그래밍
  "프로그래밍을 잘하기 위해서는 '창의성'과 '엄격함'이 모두 필요하다."
  "생성! 방어! 생성! 방어!"

  1. 창의적 프로그래머 사고방식
    창의적인 프로그래머 사고방식으로 최초의 끔찍하기 이를 데 없는 최초의 버전을 작성한다. 왜냐하면 두려움은 순식간에 창의성을 없애버리기 때문이다. 
    창의적 프로그래머 사고방식은 다음과 같다. 
    "나는 실수를 하지 않는다." 
    "사람들이 생각하는 것은 중요하지않다." 
    "머릿속에서 떠오르는 모든 생각은 훌륭한 아이디어가 될 것이다."

  2. 방어적 프로그래머 사고방식
     창의적인 프로토타입을 끝내고 난 뒤에는 이것을 견고하게 만들기 위해 창의적 사고방식을 던져버리고 진지한 모드로 전환한다.
     방어적 프로그래머의 8가지 전략은 다음과 같다.
     "입력 값을 신뢰하지 않는다." (배열의 크기, NULL, 인수 범위, ...)
     "오류를 사전에 막는다."
     "일찍, 공개적으로 실패한다."
     "가정하는 내용을 문서화한다."
     "문서화보다 예방이 먼저다."
     "모든 것을 자동화한다." (특히, 테스트를 자동화한다.)
     "간결하고 명확하게 한다."
     "권위에 의문을 가진다."

  3. C함수를 작성할 때 지키려고 하는 것들
    - 모든 파라미터에 대해 전제 조건이 무엇인지, 그 조건이 실패를 유발하거나 혹은 오류를 반환하는지 식별한다.
    - 모든 실패 예상 전제 조건 지점에 assert(test && "message"); 호출을 추가한다. 이 작은 노력(hack)으로 테스트 실패 시 OS는 여러분을 위해 메시지와 함께 assert행을 출력해 줄 것이다. 이것은 assert가 왜 거기에 있는지 파악하려고 할 때 매우 유용하다. 
    - 다른 전제 조건의 경우 오류 코드를 반환하거나 필자의 check 매크로를 사요아여 오류 메시지를 제공토록 한다. 
    - 이러한 전제 조건이 존재하는 이유를 문서화하여 프로그래머가 오류에 부딪쳤을 때 이 전제 조건이 정말로 필요한지를 결정할 수 있도록 한다.
    - 입력값을 수정하는 경우 함수가 종료될 때 수종한 값이 올바르게 되어 있는지 확인하고 그렇지 않다면 중단시킨다.
    - 사용하는 함수의 오류 코드(rc-return cod)를 항상 확인한다.
    - 또한 모든 함수가 일관된 오류 코드를 반환하도록 해야한다.

    cf. "함수를 가급적 많이 정의하도록 노력한다. 그러면 함수가 갖는 장점을 알 수 있고, 나중에 프로그램에 대한 깊이가 생겼을 때, 좋은 습관으로 자리잡고 있을 것"
        
